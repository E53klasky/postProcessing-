look at the tgv python example in PYxcoampt 3d you will have to take thier codes to read in a bp file and write out the data with command line arguments



~/Programs/Py4Incompact3D/py4incompact3d/tools qcriteria.py

change to rmse
I think it is like this: skip_factor =  skip is 2.0 in both dir yes!!!!!!!!!!!!!!!!!
def error(ground_truth, lower_res):
    file_paths = {
        1025: "output/1025_0.75t/Soln_0000.0000.h5",
        513: "output/513_0.75t/Soln_0000.0000.h5",
        257: "output/257_0.75t/Soln_0000.0000.h5",
        129: "output/129_0.75t/Soln_0000.0000.h5",
        65: "output/65_0.75t/Soln_0000.0000.h5"
    }

    if ground_truth and lower_res in file_paths:
        GT = hdf5_reader(file_paths[ground_truth], "Vz")
        E = hdf5_reader(file_paths[lower_res], "Vz")
    else:
        return f"No resolutions of this type: {ground_truth} or {lower_res}"
    skip_factor = round((groud_truth-1)/(lower_res-1))
    diff = 0
    count = 0 
    
    for i in range(0, E.shape[0]):
        for j in range(0, E.shape[1]):
            gt_value = GT[i * skip_factor, j * skip_factor]
            e_value = E[i, j]
            diff += np.abs(gt_value - e_value)
            count += 1

    mae = diff/count
    print(f"The MAE for the ground truth {ground_truth} and lower resolution: {lower_res} is: {mae}")




q_criterion is in code 

import numpy as np
 
def q_criterion(u, v, w, dx, dy, dz):
    # 1) compute all velocity gradients
    du_dx = np.gradient(u, dx, axis=0)
    du_dy = np.gradient(u, dy, axis=1)
    du_dz = np.gradient(u, dz, axis=2)
 
    dv_dx = np.gradient(v, dx, axis=0)
    dv_dy = np.gradient(v, dy, axis=1)
    dv_dz = np.gradient(v, dz, axis=2)
 
    dw_dx = np.gradient(w, dx, axis=0)
    dw_dy = np.gradient(w, dy, axis=1)
    dw_dz = np.gradient(w, dz, axis=2)
 
    # 2) build S and Omega components
    #    Sxx = du_dx,   Sxy = 0.5*(du_dy + dv_dx),  … etc.
    Sxx = du_dx
    Syy = dv_dy
    Szz = dw_dz
 
    Sxy = 0.5*(du_dy + dv_dx)
    Sxz = 0.5*(du_dz + dw_dx)
    Syz = 0.5*(dv_dz + dw_dy)
 
    Oxy = 0.5*(du_dy - dv_dx)
    Oxz = 0.5*(du_dz - dw_dx)
    Oyz = 0.5*(dv_dz - dw_dy)
 
    # 3) compute norms squared
    S2 = (
        Sxx*Sxx + Syy*Syy + Szz*Szz +
        2*(Sxy*Sxy + Sxz*Sxz + Syz*Syz)
    )
    O2 = (
        2*(Oxy*Oxy + Oxz*Oxz + Oyz*Oyz)
    )
 
    # 4) Q‐criterion
    return 0.5*(O2 - S2)


    import numpy as np
 
def q_criterion(u, v, w, dx, dy, dz):

    # 1) compute all velocity gradients

    du_dx = np.gradient(u, dx, axis=0)

    du_dy = np.gradient(u, dy, axis=1)

    du_dz = np.gradient(u, dz, axis=2)
 
    dv_dx = np.gradient(v, dx, axis=0)

    dv_dy = np.gradient(v, dy, axis=1)

    dv_dz = np.gradient(v, dz, axis=2)
 
    dw_dx = np.gradient(w, dx, axis=0)

    dw_dy = np.gradient(w, dy, axis=1)

    dw_dz = np.gradient(w, dz, axis=2)
 
    # 2) build S and Omega components

    #    Sxx = du_dx,   Sxy = 0.5*(du_dy + dv_dx),  … etc.

    Sxx = du_dx

    Syy = dv_dy

    Szz = dw_dz
 
    Sxy = 0.5*(du_dy + dv_dx)

    Sxz = 0.5*(du_dz + dw_dx)

    Syz = 0.5*(dv_dz + dw_dy)
 
    Oxy = 0.5*(du_dy - dv_dx)

    Oxz = 0.5*(du_dz - dw_dx)

    Oyz = 0.5*(dv_dz - dw_dy)
 
    # 3) compute norms squared

    S2 = (

        Sxx*Sxx + Syy*Syy + Szz*Szz +

        2*(Sxy*Sxy + Sxz*Sxz + Syz*Syz)

    )

    O2 = (

        2*(Oxy*Oxy + Oxz*Oxz + Oyz*Oyz)

    )
 
    # 4) Q‐criterion

    return 0.5*(O2 - S2)

 
import numpy as np
 
def q_criterion_2d(u, v, dx, dy):

    """

    Compute the 2D Q-criterion for velocity field (u,v) on a uniform grid.

    Parameters

    ----------

    u, v : 2D np.ndarray

        Velocity components, shape (Ny, Nx).

    dx, dy : float

        Grid spacing in x and y.

    Returns

    -------

    Q : 2D np.ndarray

        The Q-criterion field, same shape as u,v.

    """

    # 1) Velocity gradients

    #    axis=1 → ∂/∂x, axis=0 → ∂/∂y (you can swap if your array is ordered differently)

    du_dx = np.gradient(u, dx, axis=1)

    du_dy = np.gradient(u, dy, axis=0)

    dv_dx = np.gradient(v, dx, axis=1)

    dv_dy = np.gradient(v, dy, axis=0)
 
    # 2) Strain rate components

    S11 = du_dx

    S22 = dv_dy

    S12 = 0.5 * (du_dy + dv_dx)
 
    # 3) Vorticity component

    Omega12 = 0.5 * (du_dy - dv_dx)
 
    # 4) Norms squared

    S2 = S11**2 + S22**2 + 2 * S12**2

    O2 = 2 * Omega12**2
 
    # 5) Q-criterion

    return 0.5 * (O2 - S2)


